{"version":3,"sources":["SidebarOption.js","Sidebar.js","firebase.js","TweetBox.js","Post.js","Feed.js","Widgets.js","App.js","serviceWorker.js","index.js"],"names":["SidebarOption","active","Icon","text","className","Sidebar","HomeIcon","SearchIcon","NotificationsNoneIcon","MailOutlineIcon","BookmarkBorderIcon","ListAltIcon","PermIdentityIcon","MoreHorizIcon","Button","variant","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","TweetBox","useState","tweetMessage","setTweetMessage","tweetImage","setTweetImage","id","setid","useEffect","collection","get","then","snap","size","Avatar","src","onChange","e","target","value","placeholder","type","onClick","preventDefault","add","displayName","username","verified","image","avatar","Post","forwardRef","ref","alt","fontSize","Feed","item","setitem","page","setpage","loading","setloading","lastVisible","setlastVisible","limit","setlimit","orderBy","startAfter","onSnapshot","snapshot","prev","docs","map","doc","data","console","log","onScroll","currentTarget","scrollTop","clientHeight","scrollHeight","post","key","Widgets","tweetId","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.22947de9.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./SidebarOption.css\"\r\n\r\nfunction SidebarOption({active ,Icon , text }) {\r\n    return (\r\n        <div className={`sidebarOption ${active && 'sidebarOption_active'}`}>\r\n            <Icon className=\"icon\"/>\r\n            <h2 className=\"text\"> {text}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarOption\r\n","import React from 'react'\r\nimport \"./Sidebar.css\"\r\nimport SidebarOption from \"./SidebarOption\"\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone';\r\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\r\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\r\nimport ListAltIcon from '@material-ui/icons/ListAlt';\r\nimport PermIdentityIcon from '@material-ui/icons/PermIdentity';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport {Button} from '@material-ui/core'\r\n\r\nfunction Sidebar() {\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <TwitterIcon className=\"sidebar_twitterIcon\" />\r\n\r\n            <SidebarOption active Icon={HomeIcon} text=\"Home\"/>\r\n            <SidebarOption Icon={SearchIcon} text=\"Explore\"/>\r\n            <SidebarOption Icon={NotificationsNoneIcon} text=\"Notifications\"/>\r\n            <SidebarOption Icon={MailOutlineIcon} text=\"Messages\"/>\r\n            <SidebarOption Icon={BookmarkBorderIcon} text=\"Bookmarks\"/>\r\n            <SidebarOption Icon={ListAltIcon} text=\"Lists\"/>\r\n            <SidebarOption Icon={PermIdentityIcon} text=\"Profile\"/>\r\n            <SidebarOption Icon={MoreHorizIcon} text=\"More\"/>\r\n\r\n            <Button variant=\"outlined\" className=\"sidebar_vibe\" >\r\n                <span className=\"sidebar_text\"> Tweets\r\n                \r\n                </span>\r\n                <i className=\"sidebar_icon\"> OK </i>\r\n            \r\n            </Button>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import firebase from \"firebase\"\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyD9TZiJx5-i7HTBJFD0GVySniwZ0Bw_HJY\",\r\n  authDomain: \"vibra-2e3b7.firebaseapp.com\",\r\n  databaseURL: \"https://vibra-2e3b7.firebaseio.com\",\r\n  projectId: \"vibra-2e3b7\",\r\n  storageBucket: \"vibra-2e3b7.appspot.com\",\r\n  messagingSenderId: \"450333509415\",\r\n  appId: \"1:450333509415:web:d424eaf7c0a113bbfa8b02\",\r\n  measurementId: \"G-SJR1W47E2D\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig)\r\n\r\nvar db = firebaseApp.firestore();\r\n\r\nexport default db;","import React, { useState , useEffect} from \"react\";\r\nimport \"./TweetBox.css\";\r\nimport { Avatar, Button } from \"@material-ui/core\";\r\nimport db from \"./firebase\";\r\n\r\nfunction TweetBox() {\r\n  const [tweetMessage, setTweetMessage] = useState(\"\");\r\n  const [tweetImage, setTweetImage] = useState(\"\");\r\n  const [id , setid]=useState(0)\r\n\r\n\r\n  useEffect(()=>{\r\n    db.collection('posts').get().then(snap => {\r\n      setid(snap.size) // will return the collection size\r\n   })\r\n  } , [])\r\n\r\n  \r\n  const sendTweet = (e) => {\r\n    e.preventDefault();\r\n\r\n    \r\n   \r\n\r\n    db.collection(\"posts\").add({\r\n      displayName: \"Ritesh Tiwari\",\r\n      username: \"officialriteshtiwari\",\r\n      verified: true,\r\n      text: tweetMessage,\r\n      image: tweetImage,\r\n      avatar:\"\",\r\n      id:id\r\n    });\r\n\r\n    setid(id+1)\r\n    setTweetMessage(\"\");\r\n    setTweetImage(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tweetBox\">\r\n      <form>\r\n        <div className=\"tweetBox__input\">\r\n          <Avatar src=\"\" />\r\n          <input\r\n            onChange={(e) => setTweetMessage(e.target.value)}\r\n            value={tweetMessage}\r\n            placeholder=\"What's happening?\"\r\n            type=\"text\"\r\n          />\r\n        </div>\r\n        <input\r\n          value={tweetImage}\r\n          onChange={(e) => setTweetImage(e.target.value)}\r\n          className=\"tweetBox__imageInput\"\r\n          placeholder=\"Optional: Enter image URL\"\r\n          type=\"text\"\r\n        />\r\n\r\n        <Button\r\n          onClick={sendTweet}\r\n          type=\"submit\"\r\n          className=\"tweetBox__tweetButton\"\r\n        >\r\n          Tweet\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TweetBox;","import React, { forwardRef } from \"react\";\r\nimport \"./Post.css\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport VerifiedUserIcon from \"@material-ui/icons/VerifiedUser\";\r\nimport ChatBubbleOutlineIcon from \"@material-ui/icons/ChatBubbleOutline\";\r\nimport RepeatIcon from \"@material-ui/icons/Repeat\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\nimport PublishIcon from \"@material-ui/icons/Publish\";\r\n\r\nconst Post = forwardRef(\r\n  ({ displayName, username, verified, text, image, avatar }, ref) => {\r\n    return (\r\n      <div className=\"post\" ref={ref}>\r\n        <div className=\"post__avatar\">\r\n          <Avatar src={avatar} />\r\n        </div>\r\n        <div className=\"post__body\">\r\n          <div className=\"post__header\">\r\n            <div className=\"post__headerText\">\r\n              <h3>\r\n                {displayName}{\" \"}\r\n                <span className=\"post__headerSpecial\">\r\n                  {verified && <VerifiedUserIcon className=\"post__badge\" />} @\r\n                  {username}\r\n                </span>\r\n              </h3>\r\n            </div>\r\n            <div className=\"post__headerDescription\">\r\n              <p>{text}</p>\r\n            </div>\r\n          </div>\r\n          <img src={image} alt=\"\" />\r\n          <div className=\"post__footer\">\r\n            <ChatBubbleOutlineIcon fontSize=\"small\" />\r\n            <RepeatIcon fontSize=\"small\" />\r\n            <FavoriteBorderIcon fontSize=\"small\" />\r\n            <PublishIcon fontSize=\"small\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default Post","import React, {  useState  , useEffect } from \"react\";\r\nimport TweetBox from \"./TweetBox\";\r\nimport Post from \"./Post\";\r\nimport \"./Feed.css\";\r\nimport db from \"./firebase\";\r\nimport FlipMove from \"react-flip-move\";\r\n\r\n\r\nfunction Feed(){\r\n  const [item, setitem] = useState([])\r\n  const [page, setpage]= useState(1)\r\n  const [loading, setloading] = useState(true)\r\n  const [lastVisible , setlastVisible] = useState(-1)\r\n  const [limit , setlimit]=useState(3)\r\n  const [id , setid]=useState(2)\r\n  \r\n    \r\n      const handleScroll = (e)=>\r\n        {\r\n     const {scrollTop , clientHeight , scrollHeight} = e.currentTarget\r\n     if(scrollHeight - scrollTop === clientHeight)\r\n     {\r\n       \r\n        setpage((prev)=>{ return(prev+1)})\r\n        \r\n        \r\n\r\n        setid(id+1)\r\n     }\r\n\r\n   }\r\nuseEffect(()=>{\r\n  \r\n  setloading(true)\r\n  \r\n\r\n    db.collection('posts')\r\n    .orderBy('id')\r\n    .startAfter(lastVisible).limit(limit)\r\n    .onSnapshot((snapshot) => {\r\n       // this work twice, first call's snapshot contains doc of subscription describe upper\r\n       setlastVisible(id)\r\n       setlimit(1)\r\n        \r\n       setitem((prev)=> {return  [...prev , ...snapshot.docs.map((doc) => doc.data()) ]});\r\n    });\r\n    console.log(lastVisible , id , page)\r\n    setloading(false)\r\n\r\n  } , [page])\r\n  \r\n  return (\r\n    <div className=\"feed\" onScroll={handleScroll}>\r\n      <div className=\"feed__header\">\r\n        <h2>Home</h2>\r\n      </div>\r\n    \r\n      <TweetBox />\r\n     \r\n      <FlipMove>\r\n      {item && item.map((post) =>{\r\n          console.log(\"item\" , item , page)\r\n          return(\r\n            \r\n          <Post\r\n            key={post.text}\r\n            displayName={post.displayName}\r\n            username={post.username}\r\n            verified={post.verified}\r\n            text={post.text}\r\n            avatar={post.avatar}\r\n            image={post.image}\r\n          />\r\n        )}) }\r\n         \r\n      </FlipMove>\r\n      {loading && <h1>Loading...</h1>}\r\n     \r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Feed;","import React from \"react\";\r\nimport \"./Widgets.css\";\r\nimport {\r\n  TwitterTweetEmbed\r\n} from \"react-twitter-embed\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\nfunction Widgets() {\r\n  return (\r\n    <div className=\"widgets\">\r\n      <div className=\"widgets__input\">\r\n        <SearchIcon className=\"widgets__searchIcon\" />\r\n        <input placeholder=\"Search Twitter\" type=\"text\" />\r\n      </div>\r\n\r\n      <div className=\"widgets__widgetContainer\">\r\n        <h2>What's happening</h2>\r\n\r\n        <TwitterTweetEmbed tweetId={\"1296631065616855046\"} />\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Widgets;","import React from 'react';\nimport './App.css';\nimport Sidebar from \"./Sidebar\"\nimport Feed from \"./Feed\"\nimport Widgets from \"./Widgets\"\nfunction App() {\n  return (\n    <div className=\"app\">\n     \n      <Sidebar/>\n      <Feed/>\n      <Widgets />\n      \n\n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}